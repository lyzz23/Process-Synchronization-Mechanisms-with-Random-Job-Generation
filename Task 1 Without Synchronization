import time
from threading import Thread

import job_generator


class JobExecutorWithoutSync:
    def __init__(self, job_queue):
        self.job_queue = job_queue

    def execute_job(self, job):
        print(f"Starting {job['type']} Job for User {job['user']} ({job['pages']} pages)")

        for page in range(1, job["pages"] + 1):
            print(
                f"User {job['user']} {job['type']} Job - Page {page} of {job['pages']}, Arrival Time: {job['arrival_time']} seconds")
            time.sleep(1)  # Simulate 1 second per page

            # Pre-emption - after each page, switch to another job
            # (No actual switching mechanism here; we're just logging page-by-page progress)

    def run_jobs(self):
        threads = []
        for job in self.job_queue:
            # Each job runs in a separate thread to simulate simultaneous access without sync
            thread = Thread(target=self.execute_job, args=(job,))
            threads.append(thread)
            thread.start()

        for thread in threads:
            thread.join()


# Execute without synchronization
job_executor = JobExecutorWithoutSync(job_generator.job_queue)
job_executor.run_jobs()


