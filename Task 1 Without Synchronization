import threading
import time
from job_generator import JobGenerator

class JobExecutorNoSync:
    def __init__(self, job_queue):
        self.job_queue = job_queue

    def execute_job(self, job):
        print(f"[START] User {job['user']} started {job['type']} job of {job['pages']} pages.")
        for page in range(1, job['pages'] + 1):
            time.sleep(1)  # Simulate processing a page (1 second per page)
            print(f"User {job['user']} {job['type']} job: Page {page} completed.")
        print(f"[FINISH] User {job['user']} completed {job['type']} job of {job['pages']} pages.")

    def start_execution(self):
        threads = []
        for job in self.job_queue:
            # Launch a thread for each job
            thread = threading.Thread(target=self.execute_job, args=(job,))
            threads.append(thread)
            thread.start()

        # Wait for all threads to complete
        for thread in threads:
            thread.join()

# Main execution
if __name__ == "__main__":
    # Generate jobs using the parent JobGenerator class
    users = ["P1", "P2", "P3", "P4", "P5"]
    job_generator = JobGenerator(users)
    job_generator.generate_jobs_for_all_users()

    # Display the generated jobs
    print("Generated Job Queue:")
    job_generator.display_jobs()

    # Execute jobs without synchronization
    print("\nStarting job execution without synchronization:")
    job_executor = JobExecutorNoSync(job_generator.get_jobs())
    job_executor.start_execution()
