import random
import datetime

# Constants for job types and lengths
JOB_TYPES = ["Print", "Scan"]
JOB_LENGTHS = {
    "short": (1, 5),
    "medium": (6, 15),
    "large": (16, 50)
}

class JobGenerator:
    def __init__(self, users):
        self.users = users  # List of users
        self.job_queue = []  # Shared job queue

    def generate_job(self, user, start_time):
        job_type = random.choice(JOB_TYPES)  # Randomly select job type
        length_category = random.choice(list(JOB_LENGTHS.keys()))  # Randomly select job length
        pages = random.randint(*JOB_LENGTHS[length_category])  # Randomize pages within range
        interval = random.randint(1, 5)  # Randomize arrival interval (seconds)
        arrival_time = start_time + datetime.timedelta(seconds=interval)

        # Create a job dictionary
        job = {
            "user": user,
            "type": job_type,
            "pages": pages,
            "length": length_category,
            "arrival_time": arrival_time.strftime("%H:%M:%S")
        }
        self.job_queue.append(job)
        return arrival_time  # Update start time for the next job

    def generate_jobs_for_all_users(self, job_count=10):
        for user in self.users:
            start_time = datetime.datetime.now()
            for _ in range(job_count):
                start_time = self.generate_job(user, start_time)

    def get_jobs(self):
        return self.job_queue  # Return the generated job queue

    def display_jobs(self):
        for job in self.job_queue:
            print(f"User {job['user']}: {job['type']} Job, {job['pages']} pages, "
                  f"Arrival Time: {job['arrival_time']}")

